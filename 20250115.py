#Notion_Gcal_TotalTime_standalone.py
#Aggegregates Google Calendar event times and Notion task times
#Generated by Cursor using Claude 3.5 Sonnet
import os
import datetime
import pytz
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
import requests
import json
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Google Calendar Setup
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

def get_local_calendar_service():
    """Get calendar service using credentials from Calendar directory."""
    calendar_dir = os.path.join(os.path.dirname(__file__), 'Calendar')
    creds = None
    token_path = os.path.join(calendar_dir, 'token.json')
    credentials_path = os.path.join(calendar_dir, 'credentials.json')
    
    if os.path.exists(token_path):
        creds = Credentials.from_authorized_user_file(token_path, SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(credentials_path, SCOPES)
            creds = flow.run_local_server(port=0)
        with open(token_path, 'w', encoding='utf-8') as token:
            token.write(creds.to_json())
    return build('calendar', 'v3', credentials=creds)

def adjust_overlapping_events(events):
    sorted_events = sorted(events, key=lambda e: (e['start'], -e['duration']))
    adjusted_events = []
    last_end = None

    for event in sorted_events:
        if event['questionable']:
            adjusted_events.append(event)
            continue

        if last_end and event['start'] < last_end:
            if event['end'] <= last_end:
                continue  # Skip completely overlapped events
            event['start'] = last_end
            event['duration'] = event['end'] - event['start']

        adjusted_events.append(event)
        last_end = max(last_end, event['end']) if last_end else event['end']

    return adjusted_events

def calculate_event_hours(events, date):
    """Calculate total hours of events for a specific date, handling overlaps."""
    day_events = []
    central = pytz.timezone('US/Central')
    
    for event in events:
        if 'attendees' in event:
            if any(attendee.get('self') and attendee.get('responseStatus') == 'declined' 
                   for attendee in event['attendees']):
                continue

        start = event['start'].get('dateTime')
        end = event['end'].get('dateTime')
        
        if not start or not end:
            continue
            
        start_time = datetime.datetime.fromisoformat(start.replace('Z', '+00:00'))
        end_time = datetime.datetime.fromisoformat(end.replace('Z', '+00:00'))
        
        start_time_central = start_time.astimezone(central)
        end_time_central = end_time.astimezone(central)
        
        if start_time_central.date() == date:
            summary = event.get('summary', '').lower()
            questionable = any(word in summary for word in ["?", "tbd", "canx", "//", "prev complete"])
            
            if not questionable:
                duration = (end_time_central - start_time_central).total_seconds() / 3600  # Convert to hours
                day_events.append({
                    'start': start_time_central,
                    'end': end_time_central,
                    'duration': duration,  # Store as float hours
                    'questionable': questionable
                })
    
    adjusted_events = adjust_overlapping_events(day_events)
    total_hours = sum(event['duration'] for event in adjusted_events)
    return total_hours

def get_notion_headers():
    """Get Notion headers using secrets from Tasks_Notion directory."""
    notion_dir = os.path.join(os.path.dirname(__file__), 'Tasks_Notion')
    secrets_path = os.path.join(notion_dir, 'Notion_secrets.json')
    
    with open(secrets_path, 'r') as file:
        secrets = json.load(file)

    NOTION_SECRET_KEY = secrets.get('NOTION_SECRET_KEY')
    DATABASE_ID = secrets.get('NOTION_DATABASE_ID')
    if not NOTION_SECRET_KEY or not DATABASE_ID:
        raise ValueError("Either NOTION_SECRET or DATABASE_ID is missing from secrets.json")

    return {
        "Authorization": f"Bearer {NOTION_SECRET_KEY}",
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28"
    }, DATABASE_ID

def fetch_local_completed_tasks_by_date(target_date):
    """Fetch completed tasks and sum their Time Block minutes for a specific date."""
    headers, DATABASE_ID = get_notion_headers()
    
    date_start_iso = target_date.date().isoformat()
    
    payload = {
        'filter': {
            'and': [
                {
                    'property': 'Done?',
                    'checkbox': {
                        'equals': True
                    }
                },
                {
                    'property': 'Due Date',
                    'date': {
                        'equals': date_start_iso
                    }
                }
            ]
        },
        'page_size': 100
    }
    
    response = requests.post(
        f"https://api.notion.com/v1/databases/{DATABASE_ID}/query", 
        json=payload, 
        headers=headers
    )
    response.raise_for_status()
    
    tasks = response.json()['results']
    total_minutes = 0
    for task in tasks:
        time_block = task['properties'].get('Time Block (Min)', {}).get('number', 0)
        if time_block:
            total_minutes += time_block
    
    return total_minutes

def get_daily_summary(target_date):
    """Get combined summary for a specific date."""
    # Get calendar hours
    service = get_local_calendar_service()
    central = pytz.timezone('US/Central')
    
    # Query for the specific day
    start_time = datetime.datetime.combine(target_date, datetime.time.min, tzinfo=central).astimezone(datetime.timezone.utc)
    end_time = datetime.datetime.combine(target_date, datetime.time.max, tzinfo=central).astimezone(datetime.timezone.utc)
    
    events_result = service.events().list(
        calendarId='primary',
        timeMin=start_time.isoformat(),
        timeMax=end_time.isoformat(),
        singleEvents=True,
        orderBy='startTime',
        maxResults=2500
    ).execute()
    
    events = events_result.get('items', [])
    calendar_hours = calculate_event_hours(events, target_date)
    calendar_minutes = int(calendar_hours * 60)
    
    # Get Notion tasks minutes
    target_datetime = datetime.datetime.combine(target_date, datetime.time.min)
    target_datetime = pytz.timezone('US/Central').localize(target_datetime)
    notion_minutes = fetch_local_completed_tasks_by_date(target_datetime)
    
    return calendar_minutes, notion_minutes

def main():
    central = pytz.timezone('US/Central')
    today = datetime.datetime.now(central).date()
    start_date = datetime.date(2024, 8, 5)
    end_date = today - datetime.timedelta(days=1)
    
    # Collect data
    dates = []
    cal_minutes_list = []
    notion_minutes_list = []
    total_minutes_list = []
    
    current_date = start_date
    while current_date <= end_date:
        cal_minutes, notion_minutes = get_daily_summary(current_date)
        total_minutes = cal_minutes + notion_minutes
        
        dates.append(current_date.strftime('%Y-%m-%d'))
        cal_minutes_list.append(cal_minutes)
        notion_minutes_list.append(notion_minutes)
        total_minutes_list.append(total_minutes)
        
        current_date += datetime.timedelta(days=1)
    
    # Print table output
    print("\nDaily Summary:")
    print("Date        | Calendar (min) | Notion (min) | Total (min)")
    print("-" * 60)
    
    for i in range(len(dates)):
        print(f"{dates[i]} | {cal_minutes_list[i]:13d} | {notion_minutes_list[i]:11d} | {total_minutes_list[i]:11d}")
    
    # Create Plotly visualization
    fig = go.Figure()
    
    # Add Calendar Events bar
    fig.add_trace(go.Bar(
        x=dates,
        y=cal_minutes_list,
        name='Calendar Events',
        marker_color='#1f77b4'
    ))
    
    # Add Notion Tasks bar
    fig.add_trace(go.Bar(
        x=dates,
        y=notion_minutes_list,
        name='Notion Tasks',
        marker_color='#ff7f0e'
    ))
    
    # Update layout
    fig.update_layout(
        title='Daily Time Distribution',
        barmode='stack',
        template='plotly_dark',
        xaxis_title='Date',
        yaxis_title='Minutes',
        showlegend=True,
        legend=dict(
            yanchor="top",
            y=0.99,
            xanchor="left",
            x=0.01
        ),
        margin=dict(t=30, l=60, r=20, b=60)
    )
    
    # Rotate x-axis labels for better readability
    fig.update_xaxes(tickangle=45)
    
    # Show the plot
    fig.show()

if __name__ == '__main__':
    main()
