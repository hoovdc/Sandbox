#gcal_standalone.py
#This script exports events from your Google Calendar to a CSV file.
#may need to move/archive token.json so code is re-authenticated and errors are cleared.
#ensure file paths are correct between terminal directory code is run from, 
#json files used for auth, and the paths referenced in the code
#Code originally generated by Cursor using Claude 3.5 Sonnet

import os
import datetime
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
import csv
import pytz  # To handle timezone conversion

print ("\n", os.getcwd(), "\n")

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

# Function to get the Google Calendar API service
def get_calendar_service():
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.json', 'w', encoding='utf-8') as token:
            token.write(creds.to_json())
    return build('calendar', 'v3', credentials=creds)

def main():
    service = get_calendar_service()

    print('Getting events from your calendar...')

    # Prepare CSV file with dynamic naming based on export time
    central = pytz.timezone('US/Central')
    export_time = datetime.datetime.now(central).strftime("%Y%m%d_%H%M")
    csv_filename = f'gcal_export_{export_time}.csv'

    # Set time range for 2024
    start_of_2024 = datetime.datetime(2024, 1, 1, tzinfo=datetime.timezone.utc).isoformat()
    end_of_2024 = datetime.datetime(2025, 1, 1, tzinfo=datetime.timezone.utc).isoformat()

    with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Date', 'Start Time', 'Event Title', 'Event Duration', 'Event Color', 'Questionable'])

        page_token = None
        while True:
            events_result = service.events().list(
                calendarId='primary',
                timeMin=start_of_2024,
                timeMax=end_of_2024,
                singleEvents=True,
                orderBy='startTime',
                maxResults=2500,
                pageToken=page_token
            ).execute()

            events = events_result.get('items', [])

            if not events:
                break

            for event in events:
                start = event['start'].get('dateTime')
                end = event['end'].get('dateTime')

                # Skip all-day events (events with no specific time-of-day defined)
                if not start or not end:
                    continue

                start_time = datetime.datetime.fromisoformat(start.replace('Z', '+00:00'))
                end_time = datetime.datetime.fromisoformat(end.replace('Z', '+00:00'))

                # Convert to Central Time
                start_time_central = start_time.astimezone(central)
                end_time_central = end_time.astimezone(central)

                # Calculate duration for timed events
                duration = end_time_central - start_time_central

                # Check if the event is questionable
                summary = event.get('summary', '').lower()
                questionable = 1 if any(word in summary for word in ["?", "TBD", "CANX", "//"]) else 0

                # Write the event details directly to the CSV file
                writer.writerow([
                    start_time_central.date(),
                    start_time_central.strftime("%H:%M"),
                    event.get('summary', 'No Title'),
                    str(duration),
                    event.get('colorId', 'default'),
                    questionable
                ])

            page_token = events_result.get('nextPageToken')
            if not page_token:
                break

    print(f'Events exported to {csv_filename}')

if __name__ == '__main__':
    main()
